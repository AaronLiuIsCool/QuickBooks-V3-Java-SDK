/*******************************************************************************
 * Copyright (c) 2017 Intuit
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.06.06 at 02:08:21 PM PDT 
//


package com.intuit.ipp.data;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.intuit.sb.cdm.util.v3.DateAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Describes the properties of currencies defined in
 * 				QuickBooks. QuickBooks supports the world's common currencies.
 * 			
 * 
 * <p>Java class for Currency complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Currency">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schema.intuit.com/finance/v3}IntuitEntity">
 *       &lt;sequence>
 *         &lt;element name="Name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="Active" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="Code" type="{http://schema.intuit.com/finance/v3}currencyCode" minOccurs="0"/>
 *         &lt;element name="Separator" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="Format" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="DecimalPlaces" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" minOccurs="0"/>
 *         &lt;element name="DecimalSeparator" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="Symbol" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="SymbolPosition" type="{http://schema.intuit.com/finance/v3}SymbolPositionEnum" minOccurs="0"/>
 *         &lt;element name="UserDefined" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="ExchangeRate" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/>
 *         &lt;element name="AsOfDate" type="{http://www.w3.org/2001/XMLSchema}date" minOccurs="0"/>
 *         &lt;element name="CurrencyEx" type="{http://schema.intuit.com/finance/v3}IntuitAnyType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Currency", propOrder = {
    "name",
    "active",
    "code",
    "separator",
    "format",
    "decimalPlaces",
    "decimalSeparator",
    "symbol",
    "symbolPosition",
    "userDefined",
    "exchangeRate",
    "asOfDate",
    "currencyEx"
})
public class Currency
    extends IntuitEntity
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "Name")
    protected String name;
    @XmlElement(name = "Active")
    protected Boolean active;
    @XmlElement(name = "Code")
    protected CurrencyCode code;
    @XmlElement(name = "Separator")
    protected String separator;
    @XmlElement(name = "Format")
    protected String format;
    @XmlElement(name = "DecimalPlaces")
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger decimalPlaces;
    @XmlElement(name = "DecimalSeparator")
    protected String decimalSeparator;
    @XmlElement(name = "Symbol")
    protected String symbol;
    @XmlElement(name = "SymbolPosition")
    protected SymbolPositionEnum symbolPosition;
    @XmlElement(name = "UserDefined")
    protected Boolean userDefined;
    @XmlElement(name = "ExchangeRate")
    protected BigDecimal exchangeRate;
    @XmlElement(name = "AsOfDate", type = String.class)
    @XmlJavaTypeAdapter(DateAdapter.class)
    @XmlSchemaType(name = "date")
    protected Date asOfDate;
    @XmlElement(name = "CurrencyEx")
    protected IntuitAnyType currencyEx;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the active property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isActive() {
        return active;
    }

    /**
     * Sets the value of the active property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setActive(Boolean value) {
        this.active = value;
    }

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link CurrencyCode }
     *     
     */
    public CurrencyCode getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link CurrencyCode }
     *     
     */
    public void setCode(CurrencyCode value) {
        this.code = value;
    }

    /**
     * Gets the value of the separator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSeparator() {
        return separator;
    }

    /**
     * Sets the value of the separator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSeparator(String value) {
        this.separator = value;
    }

    /**
     * Gets the value of the format property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFormat() {
        return format;
    }

    /**
     * Sets the value of the format property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFormat(String value) {
        this.format = value;
    }

    /**
     * Gets the value of the decimalPlaces property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDecimalPlaces() {
        return decimalPlaces;
    }

    /**
     * Sets the value of the decimalPlaces property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDecimalPlaces(BigInteger value) {
        this.decimalPlaces = value;
    }

    /**
     * Gets the value of the decimalSeparator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDecimalSeparator() {
        return decimalSeparator;
    }

    /**
     * Sets the value of the decimalSeparator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDecimalSeparator(String value) {
        this.decimalSeparator = value;
    }

    /**
     * Gets the value of the symbol property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSymbol() {
        return symbol;
    }

    /**
     * Sets the value of the symbol property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSymbol(String value) {
        this.symbol = value;
    }

    /**
     * Gets the value of the symbolPosition property.
     * 
     * @return
     *     possible object is
     *     {@link SymbolPositionEnum }
     *     
     */
    public SymbolPositionEnum getSymbolPosition() {
        return symbolPosition;
    }

    /**
     * Sets the value of the symbolPosition property.
     * 
     * @param value
     *     allowed object is
     *     {@link SymbolPositionEnum }
     *     
     */
    public void setSymbolPosition(SymbolPositionEnum value) {
        this.symbolPosition = value;
    }

    /**
     * Gets the value of the userDefined property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isUserDefined() {
        return userDefined;
    }

    /**
     * Sets the value of the userDefined property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setUserDefined(Boolean value) {
        this.userDefined = value;
    }

    /**
     * Gets the value of the exchangeRate property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getExchangeRate() {
        return exchangeRate;
    }

    /**
     * Sets the value of the exchangeRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setExchangeRate(BigDecimal value) {
        this.exchangeRate = value;
    }

    /**
     * Gets the value of the asOfDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public Date getAsOfDate() {
        return asOfDate;
    }

    /**
     * Sets the value of the asOfDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAsOfDate(Date value) {
        this.asOfDate = value;
    }

    /**
     * Gets the value of the currencyEx property.
     * 
     * @return
     *     possible object is
     *     {@link IntuitAnyType }
     *     
     */
    public IntuitAnyType getCurrencyEx() {
        return currencyEx;
    }

    /**
     * Sets the value of the currencyEx property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntuitAnyType }
     *     
     */
    public void setCurrencyEx(IntuitAnyType value) {
        this.currencyEx = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Currency)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Currency that = ((Currency) object);
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Boolean lhsActive;
            lhsActive = this.isActive();
            Boolean rhsActive;
            rhsActive = that.isActive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "active", lhsActive), LocatorUtils.property(thatLocator, "active", rhsActive), lhsActive, rhsActive)) {
                return false;
            }
        }
        {
            CurrencyCode lhsCode;
            lhsCode = this.getCode();
            CurrencyCode rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            String lhsSeparator;
            lhsSeparator = this.getSeparator();
            String rhsSeparator;
            rhsSeparator = that.getSeparator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "separator", lhsSeparator), LocatorUtils.property(thatLocator, "separator", rhsSeparator), lhsSeparator, rhsSeparator)) {
                return false;
            }
        }
        {
            String lhsFormat;
            lhsFormat = this.getFormat();
            String rhsFormat;
            rhsFormat = that.getFormat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "format", lhsFormat), LocatorUtils.property(thatLocator, "format", rhsFormat), lhsFormat, rhsFormat)) {
                return false;
            }
        }
        {
            BigInteger lhsDecimalPlaces;
            lhsDecimalPlaces = this.getDecimalPlaces();
            BigInteger rhsDecimalPlaces;
            rhsDecimalPlaces = that.getDecimalPlaces();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalPlaces", lhsDecimalPlaces), LocatorUtils.property(thatLocator, "decimalPlaces", rhsDecimalPlaces), lhsDecimalPlaces, rhsDecimalPlaces)) {
                return false;
            }
        }
        {
            String lhsDecimalSeparator;
            lhsDecimalSeparator = this.getDecimalSeparator();
            String rhsDecimalSeparator;
            rhsDecimalSeparator = that.getDecimalSeparator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "decimalSeparator", lhsDecimalSeparator), LocatorUtils.property(thatLocator, "decimalSeparator", rhsDecimalSeparator), lhsDecimalSeparator, rhsDecimalSeparator)) {
                return false;
            }
        }
        {
            String lhsSymbol;
            lhsSymbol = this.getSymbol();
            String rhsSymbol;
            rhsSymbol = that.getSymbol();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "symbol", lhsSymbol), LocatorUtils.property(thatLocator, "symbol", rhsSymbol), lhsSymbol, rhsSymbol)) {
                return false;
            }
        }
        {
            SymbolPositionEnum lhsSymbolPosition;
            lhsSymbolPosition = this.getSymbolPosition();
            SymbolPositionEnum rhsSymbolPosition;
            rhsSymbolPosition = that.getSymbolPosition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "symbolPosition", lhsSymbolPosition), LocatorUtils.property(thatLocator, "symbolPosition", rhsSymbolPosition), lhsSymbolPosition, rhsSymbolPosition)) {
                return false;
            }
        }
        {
            Boolean lhsUserDefined;
            lhsUserDefined = this.isUserDefined();
            Boolean rhsUserDefined;
            rhsUserDefined = that.isUserDefined();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userDefined", lhsUserDefined), LocatorUtils.property(thatLocator, "userDefined", rhsUserDefined), lhsUserDefined, rhsUserDefined)) {
                return false;
            }
        }
        {
            BigDecimal lhsExchangeRate;
            lhsExchangeRate = this.getExchangeRate();
            BigDecimal rhsExchangeRate;
            rhsExchangeRate = that.getExchangeRate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "exchangeRate", lhsExchangeRate), LocatorUtils.property(thatLocator, "exchangeRate", rhsExchangeRate), lhsExchangeRate, rhsExchangeRate)) {
                return false;
            }
        }
        {
            Date lhsAsOfDate;
            lhsAsOfDate = this.getAsOfDate();
            Date rhsAsOfDate;
            rhsAsOfDate = that.getAsOfDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "asOfDate", lhsAsOfDate), LocatorUtils.property(thatLocator, "asOfDate", rhsAsOfDate), lhsAsOfDate, rhsAsOfDate)) {
                return false;
            }
        }
        {
            IntuitAnyType lhsCurrencyEx;
            lhsCurrencyEx = this.getCurrencyEx();
            IntuitAnyType rhsCurrencyEx;
            rhsCurrencyEx = that.getCurrencyEx();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currencyEx", lhsCurrencyEx), LocatorUtils.property(thatLocator, "currencyEx", rhsCurrencyEx), lhsCurrencyEx, rhsCurrencyEx)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Boolean theActive;
            theActive = this.isActive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "active", theActive), currentHashCode, theActive);
        }
        {
            CurrencyCode theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            String theSeparator;
            theSeparator = this.getSeparator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "separator", theSeparator), currentHashCode, theSeparator);
        }
        {
            String theFormat;
            theFormat = this.getFormat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "format", theFormat), currentHashCode, theFormat);
        }
        {
            BigInteger theDecimalPlaces;
            theDecimalPlaces = this.getDecimalPlaces();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalPlaces", theDecimalPlaces), currentHashCode, theDecimalPlaces);
        }
        {
            String theDecimalSeparator;
            theDecimalSeparator = this.getDecimalSeparator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "decimalSeparator", theDecimalSeparator), currentHashCode, theDecimalSeparator);
        }
        {
            String theSymbol;
            theSymbol = this.getSymbol();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "symbol", theSymbol), currentHashCode, theSymbol);
        }
        {
            SymbolPositionEnum theSymbolPosition;
            theSymbolPosition = this.getSymbolPosition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "symbolPosition", theSymbolPosition), currentHashCode, theSymbolPosition);
        }
        {
            Boolean theUserDefined;
            theUserDefined = this.isUserDefined();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userDefined", theUserDefined), currentHashCode, theUserDefined);
        }
        {
            BigDecimal theExchangeRate;
            theExchangeRate = this.getExchangeRate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exchangeRate", theExchangeRate), currentHashCode, theExchangeRate);
        }
        {
            Date theAsOfDate;
            theAsOfDate = this.getAsOfDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "asOfDate", theAsOfDate), currentHashCode, theAsOfDate);
        }
        {
            IntuitAnyType theCurrencyEx;
            theCurrencyEx = this.getCurrencyEx();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currencyEx", theCurrencyEx), currentHashCode, theCurrencyEx);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
