/*******************************************************************************
 * Copyright (c) 2017 Intuit
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.11.14 at 04:24:27 PM PST 
//


package com.intuit.ipp.data;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.intuit.sb.cdm.util.v3.DateAdapter;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Describes properties of an exchange rate between
 * 				source and target currencies.
 * 
 * <p>Java class for ExchangeRate complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ExchangeRate">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schema.intuit.com/finance/v3}IntuitEntity">
 *       &lt;sequence>
 *         &lt;element name="SourceCurrencyCode" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="TargetCurrencyCode" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="Rate" type="{http://www.w3.org/2001/XMLSchema}decimal" minOccurs="0"/>
 *         &lt;element name="AsOfDate" type="{http://www.w3.org/2001/XMLSchema}date" minOccurs="0"/>
 *         &lt;element name="ExchangeRateEx" type="{http://schema.intuit.com/finance/v3}IntuitAnyType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ExchangeRate", propOrder = {
    "sourceCurrencyCode",
    "targetCurrencyCode",
    "rate",
    "asOfDate",
    "exchangeRateEx"
})
public class ExchangeRate
    extends IntuitEntity
    implements Serializable, Equals, HashCode
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "SourceCurrencyCode")
    protected String sourceCurrencyCode;
    @XmlElement(name = "TargetCurrencyCode")
    protected String targetCurrencyCode;
    @XmlElement(name = "Rate")
    protected BigDecimal rate;
    @XmlElement(name = "AsOfDate", type = String.class)
    @XmlJavaTypeAdapter(DateAdapter.class)
    @XmlSchemaType(name = "date")
    protected Date asOfDate;
    @XmlElement(name = "ExchangeRateEx")
    protected IntuitAnyType exchangeRateEx;

    /**
     * Gets the value of the sourceCurrencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSourceCurrencyCode() {
        return sourceCurrencyCode;
    }

    /**
     * Sets the value of the sourceCurrencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSourceCurrencyCode(String value) {
        this.sourceCurrencyCode = value;
    }

    /**
     * Gets the value of the targetCurrencyCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTargetCurrencyCode() {
        return targetCurrencyCode;
    }

    /**
     * Sets the value of the targetCurrencyCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTargetCurrencyCode(String value) {
        this.targetCurrencyCode = value;
    }

    /**
     * Gets the value of the rate property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getRate() {
        return rate;
    }

    /**
     * Sets the value of the rate property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setRate(BigDecimal value) {
        this.rate = value;
    }

    /**
     * Gets the value of the asOfDate property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public Date getAsOfDate() {
        return asOfDate;
    }

    /**
     * Sets the value of the asOfDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAsOfDate(Date value) {
        this.asOfDate = value;
    }

    /**
     * Gets the value of the exchangeRateEx property.
     * 
     * @return
     *     possible object is
     *     {@link IntuitAnyType }
     *     
     */
    public IntuitAnyType getExchangeRateEx() {
        return exchangeRateEx;
    }

    /**
     * Sets the value of the exchangeRateEx property.
     * 
     * @param value
     *     allowed object is
     *     {@link IntuitAnyType }
     *     
     */
    public void setExchangeRateEx(IntuitAnyType value) {
        this.exchangeRateEx = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ExchangeRate)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ExchangeRate that = ((ExchangeRate) object);
        {
            String lhsSourceCurrencyCode;
            lhsSourceCurrencyCode = this.getSourceCurrencyCode();
            String rhsSourceCurrencyCode;
            rhsSourceCurrencyCode = that.getSourceCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceCurrencyCode", lhsSourceCurrencyCode), LocatorUtils.property(thatLocator, "sourceCurrencyCode", rhsSourceCurrencyCode), lhsSourceCurrencyCode, rhsSourceCurrencyCode)) {
                return false;
            }
        }
        {
            String lhsTargetCurrencyCode;
            lhsTargetCurrencyCode = this.getTargetCurrencyCode();
            String rhsTargetCurrencyCode;
            rhsTargetCurrencyCode = that.getTargetCurrencyCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "targetCurrencyCode", lhsTargetCurrencyCode), LocatorUtils.property(thatLocator, "targetCurrencyCode", rhsTargetCurrencyCode), lhsTargetCurrencyCode, rhsTargetCurrencyCode)) {
                return false;
            }
        }
        {
            BigDecimal lhsRate;
            lhsRate = this.getRate();
            BigDecimal rhsRate;
            rhsRate = that.getRate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rate", lhsRate), LocatorUtils.property(thatLocator, "rate", rhsRate), lhsRate, rhsRate)) {
                return false;
            }
        }
        {
            Date lhsAsOfDate;
            lhsAsOfDate = this.getAsOfDate();
            Date rhsAsOfDate;
            rhsAsOfDate = that.getAsOfDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "asOfDate", lhsAsOfDate), LocatorUtils.property(thatLocator, "asOfDate", rhsAsOfDate), lhsAsOfDate, rhsAsOfDate)) {
                return false;
            }
        }
        {
            IntuitAnyType lhsExchangeRateEx;
            lhsExchangeRateEx = this.getExchangeRateEx();
            IntuitAnyType rhsExchangeRateEx;
            rhsExchangeRateEx = that.getExchangeRateEx();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "exchangeRateEx", lhsExchangeRateEx), LocatorUtils.property(thatLocator, "exchangeRateEx", rhsExchangeRateEx), lhsExchangeRateEx, rhsExchangeRateEx)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theSourceCurrencyCode;
            theSourceCurrencyCode = this.getSourceCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceCurrencyCode", theSourceCurrencyCode), currentHashCode, theSourceCurrencyCode);
        }
        {
            String theTargetCurrencyCode;
            theTargetCurrencyCode = this.getTargetCurrencyCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "targetCurrencyCode", theTargetCurrencyCode), currentHashCode, theTargetCurrencyCode);
        }
        {
            BigDecimal theRate;
            theRate = this.getRate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rate", theRate), currentHashCode, theRate);
        }
        {
            Date theAsOfDate;
            theAsOfDate = this.getAsOfDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "asOfDate", theAsOfDate), currentHashCode, theAsOfDate);
        }
        {
            IntuitAnyType theExchangeRateEx;
            theExchangeRateEx = this.getExchangeRateEx();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exchangeRateEx", theExchangeRateEx), currentHashCode, theExchangeRateEx);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
